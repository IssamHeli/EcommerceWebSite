
@using Blazored.LocalStorage
@inject HttpClient Http
@inject ILocalStorageService LocalStorage
@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime
<h3>Orders with Product Information</h3>

@if (isLoading)
{
    <p>Loading orders...</p>
}
else if (ordersWithProductInfoList?.Count > 0)
{
    <div class="table-responsive">
        <table class="table table-bordered table-striped">
            <thead>
                <tr>
                    <th>Customer Name</th>
                    <th>Email</th>
                    <th>Phone</th>
                    <th>Address</th>
                    <th>Image</th>
                    <th>Product Name</th>
                    <th>Product Price</th>
                    <th>Quantity</th>
                    <th>Total Price</th>
                    <th>Status</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in ordersWithProductInfoList)
                {
                    <tr>
                        <td>@item.order?.CustomerName</td>
                        <td>@item.order?.CustomerEmail</td>
                        <td>@item.order?.CustomerPhone</td>
                        <td>@item.order?.CustomerAddress</td>

                        <td>
                            @if (!string.IsNullOrEmpty(item.product?.ImageUrl))
                            {
                                <img src="@item.product.ImageUrl" alt="@item.product?.Name" style="max-height: 50px;" />
                            }
                            else
                            {
                                <span>N/A</span>
                            }
                        </td>

                        <td>@item.product?.Name </td>
                        <td>@item.product?.Price <strong>DH</strong></td>

                        <td>@item.order?.Quantity</td>
                        <td>@((item.product?.Price ?? 0) * item.order?.Quantity ?? 0)</td>

                        <td>@item.order?.Status</td>


                        <td>
                            <div class="dropdown">
                                <!-- Dropdown Button -->
                                <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-expanded="false">
                                    Options
                                </button>

                                <!-- Dropdown Menu -->
                                <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                                    <li><a class="btn btn-primary mb-2" @onclick="() => MarkAsConfirmed(item.order.Id)">Confirmed</a></li>
                                    <li><a class="btn btn-success mb-2" @onclick="() => MarkAsDelivered(item.order.Id)">Delivered</a></li>
                                    <li><a class="btn btn-warning mb-2" @onclick="() => MarkAsReturn(item.order.Id)">Return</a></li>
                                    <li><a class="btn btn-danger mb-2" @onclick="() => DeleteOrder(item.order.Id)">Delete Order</a></li>
                                </ul>
                            </div>


                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
else
{
    <p>@Errormessage</p>
}

<div class="modal fade" id="confirmDeleteModal" tabindex="-1" aria-labelledby="confirmDeleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="confirmDeleteModalLabel">Confirm Deletion</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete this order?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" @onclick="() => ConfirmDelete()">Delete</button>
            </div>
        </div>
    </div>
</div>


@code {


    private List<OrderWithProductInfo> ordersWithProductInfoList = new();
    private bool isLoading = true;

    private string Errormessage = string.Empty;
    private int orderIdToDelete;

    

    private async Task MarkAsConfirmed(int orderId)
    {
        await UpdateOrderStatus(orderId, "Confirmed");
    }

    private async Task MarkAsDelivered(int orderId)
    {
        await UpdateOrderStatus(orderId, "Delivered");
    }

    private async Task MarkAsReturn(int orderId)
    {
        await UpdateOrderStatus(orderId, "Return");
    }
    private async Task UpdateOrderStatus(int orderId, string status)
    {
        try
        {
             var authToken = await LocalStorage.GetItemAsync<string>("authToken");

            if (string.IsNullOrEmpty(authToken))
            {
                throw new UnauthorizedAccessException("No authorization token found. Please log in.");
            }

            // Add the token to the Authorization header
            HttpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", authToken);
            var response = await HttpClient.PutAsJsonAsync($"orders/{orderId}/status", status);
            if (response.IsSuccessStatusCode)
            {

                await LoadOrders();
                await InvokeAsync(StateHasChanged);
            }
            else
            {
                Errormessage = await response.Content.ReadAsStringAsync();
            }
        }
        catch (Exception ex)
        {
            Errormessage = ex.ToString();
        }
    }

    private async Task DeleteOrder(int orderId)
    {
        // Save the orderId in a variable for confirmation
        orderIdToDelete = orderId;

        // Ensure the DOM is ready and the modal is initialized
        await JSRuntime.InvokeVoidAsync("eval", @"
        if (typeof $ !== 'undefined') {
            $('#confirmDeleteModal').modal('show');
        } 
    ");
    }

    private async Task ConfirmDelete()
    {
        try
        {
             var authToken = await LocalStorage.GetItemAsync<string>("authToken");

            if (string.IsNullOrEmpty(authToken))
            {
                throw new UnauthorizedAccessException("No authorization token found. Please log in.");
            }

            // Add the token to the Authorization header
            HttpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", authToken);
            var response = await HttpClient.DeleteAsync($"orders/{orderIdToDelete}");

            if (response.IsSuccessStatusCode)
            {
                await JSRuntime.InvokeVoidAsync("eval", @"
                if (typeof $ !== 'undefined') {
                    $('#confirmDeleteModal').modal('hide');
                } 
            ");

                await LoadOrders();
                await InvokeAsync(StateHasChanged);
            }
        }
        catch (Exception ex)
        {
            Errormessage = ex.ToString();
        }
    }

    /*
    private async Task DeleteProductAsync(int orderId)
    {
        try
        {
            var response = await Http.PutAsJsonAsync($"orders/{orderId}/status", status);
            if (response.IsSuccessStatusCode)
            {
                StateHasChanged();
            }
            else
            {
                Errormessage = await response.Content.ReadAsStringAsync();
            }
        }
        catch (Exception ex)
        {
            Errormessage = ex.ToString();
        }
    }
    */
    protected override async Task OnInitializedAsync()
    {
        await LoadOrders();
    }

    private async Task LoadOrders()
    {
        try
        {
            // Retrieve the token from local storage
            var authToken = await LocalStorage.GetItemAsync<string>("authToken");

            if (string.IsNullOrEmpty(authToken))
            {
                throw new UnauthorizedAccessException("No authorization token found. Please log in.");
            }

            // Add the token to the Authorization header
            HttpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", authToken);

            // Make API call to fetch orders
            var response = await HttpClient.GetAsync("orders");
            if (response.IsSuccessStatusCode)
            {
                ordersWithProductInfoList = await response.Content.ReadFromJsonAsync<List<OrderWithProductInfo>>() ?? new();
            }
            else
            {
                Errormessage = response.ToString();
            }
        }
        catch (Exception ex)
        {
            Errormessage = ex.ToString();

        }
        finally
        {
            isLoading = false;
        }
    }

    private class OrderWithProductInfo
    {
        public OrderDto? order { get; set; }
        public Product? product { get; set; }
    }

    private class OrderDto
    {

        public int Id { get; set; } // Primary Key
        public string CustomerName { get; set; } = string.Empty;
        public string CustomerEmail { get; set; } = string.Empty;
        public string CustomerAddress { get; set; } = string.Empty;
        public string CustomerPhone { get; set; } = string.Empty;
        public string Status { get; set; } = string.Empty;
        public int ProductId { get; set; }
        public int Quantity { get; set; }
    }

    private class Product
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public string Category { get; set; } = string.Empty;
        public decimal Price { get; set; }
        public int Stock { get; set; }
        public string ImageUrl { get; set; } = string.Empty;
    }
}
