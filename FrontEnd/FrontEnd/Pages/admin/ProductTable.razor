

@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime

<div class="container">
    <div class="accordion" id="productAccordion">
        <div class="accordion-item">
            <h2 class="accordion-header" id="headingOne">
                <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                    Filter Products Options
                </button>
            </h2>
            <div id="collapseOne" class="accordion-collapse collapse show" aria-labelledby="headingOne" data-bs-parent="#productAccordion">
                <div class="accordion-body">
                    <form @onsubmit="FilterProducts" class="row g-3">
                        <!-- Search Input -->
                        <div class="col-md-3">
                            <label for="search" class="form-label">Search</label>
                            <input type="text" class="form-control" id="search" @bind="search" placeholder="Search by name" />
                        </div>

                        <!-- Category Dropdown -->
                        <div class="col-md-3">
                            <label for="category" class="form-label">Category</label>
                            <select class="form-control" id="category" @bind="category">
                                <option value="">Select Category</option>
                                <option value="Electronics">Electronics</option>
                                <option value="Watches">Watches</option>
                                <option value="Phones">Phones</option>
                                <!-- Add more categories as needed -->
                            </select>
                        </div>

                        <!-- Min Price -->
                        <div class="col-md-2">
                            <label for="minPrice" class="form-label">Min Price</label>
                            <input type="number" class="form-control" id="minPrice" @bind="minPrice" placeholder="Min Price" />
                        </div>

                        <!-- Max Price -->
                        <div class="col-md-2">
                            <label for="maxPrice" class="form-label">Max Price</label>
                            <input type="number" class="form-control" id="maxPrice" @bind="maxPrice" placeholder="Max Price" />
                        </div>

                        <!-- Submit Button -->
                        <div class="col-md-2 d-flex align-items-end">
                            <button type="submit" class="btn btn-primary m-2 ">Apply </button>
                            <button class="btn btn-primary m-2" @onclick="ResetForm">Reset </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <br />

    @if (productResponse != null)
    {
        @if (productResponse.Products != null)
        {

            <td><a class="btn btn-secondary">Create a product</a></td>
            <nav>
                <ul class="pagination justify-content-end">
                    <!-- Previous Page -->
                    <li class="page-item @(productResponse.CurrentPage == 1 ? "disabled" : "")">
                        <button class="page-link" @onclick="() => LoadProductsPage(productResponse.CurrentPage - 1)">Previous</button>
                    </li>

                    <!-- Page Numbers -->
                    @for (int i = 1; i <= productResponse.TotalPages; i++)
                    {
                        <li class="page-item @(i == productResponse.CurrentPage ? "active" : "")">
                            <button class="page-link" @onclick="() => LoadProductsPage(i)">@i</button>
                        </li>
                    }

                    <!-- Next Page -->
                    <li class="page-item @(productResponse.CurrentPage == productResponse.TotalPages ? "disabled" : "")">
                        <button class="page-link" @onclick="() => LoadProductsPage(productResponse.CurrentPage + 1)">Next</button>
                    </li>
                </ul>
            </nav>

            <div class="table-responsive">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Product Name</th>
                            <th>Description</th>
                            <th>Category</th>
                            <th>Price</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var product in productResponse.Products)
                        {
                            <tr>
                                <td>@product.Name</td>
                                @if (product.Description.Length > 80)
                                {

                                    <td>
                                        @product.Description.Substring(0, 80)...
                                    </td>
                                }
                                else
                                {
                                    <td>
                                        @product.Description
                                    </td>
                                }
                                <td>@product.Category</td>
                                <td>@product.Price.ToString() Dh</td>
                                <td>
                                    <div class="dropdown">
                                        <!-- Dropdown Button -->
                                        <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-expanded="false">
                                            Options
                                        </button>

                                        <!-- Dropdown Menu -->
                                        <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                                            <li><a class="btn btn-secondary">Edit</a></li>
                                            <li><a class="btn btn-danger" @onclick="() => ConfirmDeleteProduct(product.Id)">Delete</a></li>
                                        </ul>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <nav>
                <ul class="pagination justify-content-end">
                    <!-- Previous Page -->
                    <li class="page-item @(productResponse.CurrentPage == 1 ? "disabled" : "")">
                        <button class="page-link" @onclick="() => LoadProductsPage(productResponse.CurrentPage - 1)">Previous</button>
                    </li>

                    <!-- Page Numbers -->
                    @for (int i = 1; i <= productResponse.TotalPages; i++)
                    {
                        <li class="page-item @(i == productResponse.CurrentPage ? "active" : "")">
                            <button class="page-link" @onclick="() => LoadProductsPage(i)">@i</button>
                        </li>
                    }

                    <!-- Next Page -->
                    <li class="page-item @(productResponse.CurrentPage == productResponse.TotalPages ? "disabled" : "")">
                        <button class="page-link" @onclick="() => LoadProductsPage(productResponse.CurrentPage + 1)">Next</button>
                    </li>
                </ul>
            </nav>
        }
        else
        {
            <div class="row">
                <div class="col-12 text-center">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <div class="alert alert-info"> @Errormessage</div>
    }
</div>

<div class="modal" tabindex="-1" id="confirmDeleteModal">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this product?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" @onclick="DeleteProductConfirmed">Confirm Delete</button>
            </div>
        </div>
    </div>
</div>

@code {
    protected override async Task OnInitializedAsync()
    {
        // Initially load the first page of products
        await LoadProductsPage(1);
    }

    private ProductResponse? productResponse;
    private int productIdToDelete;

    private string Errormessage = string.Empty;

    private string search = string.Empty;
    private string category = string.Empty;
    private decimal? minPrice;
    private decimal? maxPrice;



    private async Task LoadProductsPage(int pageNumber)
    {
        var response = await HttpClient.GetFromJsonAsync<ProductResponse>($"products?page={pageNumber}");
        if (response != null)
        {
            productResponse = response;
            StateHasChanged();
        }
        else
        {
            productResponse = null;
            StateHasChanged();
        }


    }

    private async Task FilterProducts()
    {
        var response = await HttpClient.GetFromJsonAsync<ProductResponse>($"products?page=1&pageSize=10&search={search}&category={category}&minPrice={minPrice}&maxPrice={maxPrice}");
        if (response != null)
        {
            productResponse = response;
            StateHasChanged();
        }
        else
        {
            productResponse = null;
            StateHasChanged();
        }

    }


    private async Task LoadNextPage()
    {
        if (productResponse.CurrentPage < productResponse.TotalPages)
        {
            await LoadProductsPage(productResponse.CurrentPage + 1);
        }
    }

    private async void ResetForm()
    {
        search = string.Empty;
        category = string.Empty;
        minPrice = null;
        maxPrice = null;
        await LoadProductsPage(1);

    }


    private async void ConfirmDeleteProduct(int productId)
    {
        productIdToDelete = productId;
        await ShowDeleteModal();
    }

    private async Task DeleteProductConfirmed()
    {
        try
        {
            // Call the API to delete the product
            var response = await HttpClient.DeleteAsync($"products/{productIdToDelete}");
            if (response.IsSuccessStatusCode)
            {
                await LoadProductsPage(productResponse.CurrentPage);

                await HideDeleteModal();
                StateHasChanged();
            }
            else
            {
                Errormessage = "Failed to delete product.";
            }
        }
        catch (Exception ex)
        {
            Errormessage = ex.Message.ToString();
        }
    }

    private async Task ShowDeleteModal()
    {
        await JSRuntime.InvokeVoidAsync("eval", @"
        if (typeof $ !== 'undefined') {
            $('#confirmDeleteModal').modal('show');
        } else {
            console.error('jQuery is not loaded.');
        }
    ");
    }

    private async Task HideDeleteModal()
    {
        await JSRuntime.InvokeVoidAsync("eval", @"
        if (typeof $ !== 'undefined') {
            $('#confirmDeleteModal').modal('hide');
        } else {
            console.error('jQuery is not loaded.');
        }
    ");
    }

    public class Producte
    {
        public int Id { get; set; }
        public string? Name { get; set; }
        public string? Description { get; set; }
        public string? Category { get; set; }
        public decimal? Price { get; set; }
        public int? Stock { get; set; }
        public string? ImageUrl { get; set; }
    }

    public class ProductResponse
    {
        public int TotalCount { get; set; }
        public int TotalPages { get; set; }
        public int CurrentPage { get; set; }
        public int PageSize { get; set; }
        public List<Producte>? Products { get; set; }
    }
}

